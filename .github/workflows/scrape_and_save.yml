name: Scrape & Save to S3 (Reusable Workflow)

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: 'The environment to run the workflow in (dev or prod)'
    secrets:
      AWS_REGION:
        required: true
      AWS_GITHUB_ACTIONS_ROLE_ARN:
        required: true

permissions:
  id-token: write # Required for requesting the Json Web Token (JWT)
  contents: write  # Required for committing the updated data to the repository

jobs:
  scrape-prices:
    runs-on: ubuntu-latest
    steps:
      # The first step is to check out the repository so it can read the files inside of it and do other operations
      - name: Check out repo
        id: checkout-code
        uses: actions/checkout@v4

      # The second step installs Deno, which is a new Javascript runtime that improves on Node, used for postprocessing later
      - name: Setup deno
        id: setup-deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x
          
      # The third step where we fetch the data and save it as a file in the repository
      - name: Fetch data 
        id: fetch-data
        run: deno run --allow-net --allow-write --allow-import=deno.land,cdn.deno.land,jspm.dev fetch_data.js
      
      # The fourth step is to commit the data back to the repository
      - name: Set environment variables
        id: set-env
        run: echo "SHA_SHORT=$(git rev-parse --short $GITHUB_SHA)" >> $GITHUB_ENV

      - name: Commit changes
        id: commit-changes
        if: ${{ inputs.environment == 'prod' }}
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "fetch data ${{ env.SHA_SHORT }}"
          file_pattern: 'btc-price-postporcesesd.json'

  save-to-s3:
    runs-on: ubuntu-latest
    needs: scrape-prices
    steps:
      - name: Checkout repository
        id: checkout-repo
        uses: actions/checkout@v4

      - name: Configure AWS credentials from OIDC
        id: configure-aws-credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: sts.amazonaws.com
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_GITHUB_ACTIONS_ROLE_ARN }}
          role-session-name: upload-to-s3

      - name: Install uv
        id: install-uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "0.5.3"

      - name: Install dependencies
        id: install-deps
        run: |
          uv sync --frozen 

      - name: Run script
        id: run-script
        env:
          ENV: ${{ inputs.environment }}
        run: |
          uv run python3 write_data.py
